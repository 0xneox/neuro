{"version":3,"file":"static/js/122.9bb1ba90.chunk.js","mappings":"qLAMA,MAAMA,EAAkBC,EAAAA,GAAOC,GAAG;;;;;;;;;;EAY5BC,EAAaF,EAAAA,GAAOC,GAAG;WAClBE,GAAUA,EAAMC,OAAS,UAAY;;;;;;;;;;;;EAc1CC,EAAcL,EAAAA,GAAOC,GAAG;;;EAkC9B,EA7BeK,KACb,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,EAAW,CACf,CAAEC,KAAM,QAASC,KAAMC,EAAAA,IAAQC,MAAO,QACtC,CAAEH,KAAM,SAAUC,KAAMG,EAAAA,IAAWD,MAAO,SAC1C,CAAEH,KAAM,eAAgBC,KAAMI,EAAAA,IAAYF,MAAO,eACjD,CAAEH,KAAM,UAAWC,KAAMK,EAAAA,IAASH,MAAO,UACzC,CAAEH,KAAM,WAAYC,KAAMM,EAAAA,IAAQJ,MAAO,WACzC,CAAEH,KAAM,YAAaC,KAAMO,EAAAA,IAAOL,MAAO,aAG3C,OACEM,EAAAA,EAAAA,KAACtB,EAAe,CAAAuB,SACbX,EAASY,KAAIC,IACZC,EAAAA,EAAAA,MAACvB,EAAU,CAETE,OAAQK,EAASiB,WAAaF,EAAKZ,KACnCe,QAASA,IAAMpB,EAASiB,EAAKZ,MAAMU,SAAA,EAEnCD,EAAAA,EAAAA,KAACG,EAAKX,KAAI,KACVQ,EAAAA,EAAAA,KAAChB,EAAW,CAAAiB,SAAEE,EAAKT,UALdS,EAAKZ,SAQE,C,6MCpDtB,MAAMgB,GAAiB5B,EAAAA,EAAAA,IAAO6B,EAAAA,EAAO5B,IAAI;;;;;;0BAMf6B;;;;;EAOpBC,EAAS/B,EAAAA,GAAOgC,MAAM;;;;;;;;;;;;EActBC,EAAOjC,EAAAA,GAAOkC,GAAG;;;EAKjBC,EAAiBnC,EAAAA,GAAOC,GAAG;;;;;;EAQ3BmC,GAAcpC,EAAAA,EAAAA,IAAO6B,EAAAA,EAAO5B,IAAI;;;;;;;;;EAWhCoC,EAAWrC,EAAAA,GAAOC,GAAG;;;EAKrBqC,GAAStC,EAAAA,EAAAA,IAAO6B,EAAAA,EAAOK,IAAI;;;;;EAO3BK,GAAcvC,EAAAA,EAAAA,IAAO6B,EAAAA,EAAO5B,IAAI;;;EAKhCuC,EAAWxC,EAAAA,GAAOyC,EAAE;;;EAKpBC,EAAS1C,EAAAA,GAAO2C,IAAI;;;EAKpBC,EAAU5C,EAAAA,GAAO2C,IAAI;;;EAKrBE,GAAc7C,EAAAA,EAAAA,IAAO6B,EAAAA,EAAO5B,IAAI;;;EAKhC6C,GAAS9C,EAAAA,EAAAA,IAAO6B,EAAAA,EAAOkB,OAAO;;;;;;;;;;;;;EAe9BC,GAAYhD,EAAAA,EAAAA,IAAO6B,EAAAA,EAAO5B,IAAI;;;;;EAO9BgD,GAAWjD,EAAAA,EAAAA,IAAO6B,EAAAA,EAAO5B,IAAI;;;;;EAO7BiD,EAAYlD,EAAAA,GAAOmD,EAAE;;;EAKrBC,EAAYpD,EAAAA,GAAOqD,CAAC;;;;EAMpBC,GAAiBtD,EAAAA,EAAAA,IAAO6B,EAAAA,EAAO5B,IAAI;;;;;;EAQnCsD,GAAevD,EAAAA,EAAAA,IAAO6B,EAAAA,EAAOsB,GAAG;;;;EAuItC,EAjIgBK,KAEd,MAAMC,EAAW,CACfC,SAAU,WACVC,GAAI,aACJC,QAAS,IACTC,OAAQC,EACRC,GAAI,KACJC,aAAc,IACdC,UAAW,IACXC,UAAW,IAwBPC,EAAe,CACnBC,OAAQ,CAAEC,EAAG,GAAIC,QAAS,GAC1BC,QAAS,CACPF,EAAG,EACHC,QAAS,EACTE,WAAY,CACVC,KAAM,SACNC,UAAW,OAKXC,EAAiB,CACrBC,MAAO,CACLC,OAAQ,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,GAC1BL,WAAY,CACVM,SAAU,GACVC,OAAQC,IACRC,WAAY,aAKlB,OACExD,EAAAA,EAAAA,MAACG,EAAc,CACbsD,SApCsB,CACxBd,OAAQ,CAAEE,QAAS,GACnBC,QAAS,CACPD,QAAS,EACTE,WAAY,CACVW,KAAM,iBACNC,gBAAiB,MA+BnBC,QAAQ,SACRC,QAAQ,UAAShE,SAAA,EAEjBG,EAAAA,EAAAA,MAACM,EAAM,CAAAT,SAAA,EACLD,EAAAA,EAAAA,KAACY,EAAI,CAACsD,IAAKC,EAAUC,IAAI,eACzBpE,EAAAA,EAAAA,KAACY,EAAI,CAACsD,IAAKG,EAAWD,IAAI,mBAG5BhE,EAAAA,EAAAA,MAACU,EAAc,CAAAb,SAAA,EACbG,EAAAA,EAAAA,MAACW,EAAW,CAAC8C,SAAUf,EAAa7C,SAAA,EAClCG,EAAAA,EAAAA,MAACY,EAAQ,CAAAf,SAAA,EACPD,EAAAA,EAAAA,KAACiB,EAAM,CACLiD,IAAK9B,EAASI,OACd4B,IAAKhC,EAASC,SACdiC,WAAY,CAAEC,MAAO,KACrBC,SAAU,CAAED,MAAO,OAErBnE,EAAAA,EAAAA,MAACc,EAAW,CAAC2C,SAAUP,EAAgBgB,WAAW,QAAOrE,SAAA,EACvDD,EAAAA,EAAAA,KAACmB,EAAQ,CAAAlB,SAAEmC,EAASC,YACpBjC,EAAAA,EAAAA,MAACiB,EAAM,CAAApB,SAAA,CAAC,OAAKmC,EAASE,OACtBlC,EAAAA,EAAAA,MAACmB,EAAO,CAAAtB,SAAA,CAAC,aAAWmC,EAASG,kBAGjCnC,EAAAA,EAAAA,MAACoB,EAAW,CAAAvB,SAAA,EACVD,EAAAA,EAAAA,KAACyB,EAAM,CAAC6C,WAAY,CAAEC,MAAO,MAAQC,SAAU,CAAED,MAAO,KAAOtE,SAAC,kBAChEG,EAAAA,EAAAA,MAACqB,EAAM,CAAC6C,WAAY,CAAEC,MAAO,MAAQC,SAAU,CAAED,MAAO,KAAOtE,SAAA,EAACD,EAAAA,EAAAA,KAACH,EAAAA,IAAO,IAAG,IAAEuC,EAASS,oBAK1F7C,EAAAA,EAAAA,KAAC2B,EAAS,CAACkC,SAAUf,EAAa7C,SAC/B,CACC,CAAEwE,MAAOrC,EAASM,GAAGgC,iBAAkBhF,MAAO,MAC9C,CAAE+E,MAAOrC,EAASO,aAAcjD,MAAO,iBACvC,CAAE+E,MAAOrC,EAASQ,UAAU8B,iBAAkBhF,MAAO,eACrDQ,KAAI,CAACyE,EAAMC,KACXxE,EAAAA,EAAAA,MAACwB,EAAQ,CAEP0C,WAAY,CAAEC,MAAO,KAAMf,OAAQ,CAAC,EAAG,GAAI,EAAG,IAC9CL,WAAY,CAAEC,KAAM,SAAUC,UAAW,KAAMpD,SAAA,EAE/CD,EAAAA,EAAAA,KAAC6B,EAAS,CAAA5B,SAAE0E,EAAKF,SACjBzE,EAAAA,EAAAA,KAAC+B,EAAS,CAAA9B,SAAE0E,EAAKjF,UALZkF,QAUX5E,EAAAA,EAAAA,KAACkC,EAAY,CAAC2B,SAAUf,EAAa7C,SAAC,oBACtCD,EAAAA,EAAAA,KAACiC,EAAc,CACb4B,SAAUf,EACVwB,WAAY,CAAEC,MAAO,MACrBpB,WAAY,CAAEC,KAAM,SAAUC,UAAW,KAAMpD,UAE/CD,EAAAA,EAAAA,KAAC6E,EAAAA,EAAmB,CAACC,MAAM,OAAOC,OAAO,OAAM9E,UAC7CG,EAAAA,EAAAA,MAAC4E,EAAAA,EAAS,CAACC,KArGA,CACnB,CAAEC,KAAM,MAAOxC,GAAI,KACnB,CAAEwC,KAAM,MAAOxC,GAAI,MACnB,CAAEwC,KAAM,MAAOxC,GAAI,MACnB,CAAEwC,KAAM,MAAOxC,GAAI,MACnB,CAAEwC,KAAM,MAAOxC,GAAI,KACnB,CAAEwC,KAAM,MAAOxC,GAAI,MACnB,CAAEwC,KAAM,MAAOxC,GAAI,OA8FmBzC,SAAA,EAC5BD,EAAAA,EAAAA,KAACmF,EAAAA,EAAK,CAACC,QAAQ,OAAOC,OAAO,aAC7BrF,EAAAA,EAAAA,KAACsF,EAAAA,EAAK,CAACD,OAAO,aACdrF,EAAAA,EAAAA,KAACuF,EAAAA,EAAO,KACRvF,EAAAA,EAAAA,KAACwF,EAAAA,EAAI,CAACpC,KAAK,WAAWgC,QAAQ,KAAKC,OAAO,UAAUI,YAAa,eAMzEzF,EAAAA,EAAAA,KAACf,EAAAA,EAAM,MACQ,C","sources":["components/Navbar.js","pages/Profile.js"],"sourcesContent":["// components/Navbar.js\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { FaHome, FaSyncAlt, FaChartBar, FaUser, FaUsers, FaCog } from 'react-icons/fa';\r\n\r\nconst NavbarContainer = styled.div`\r\n  position: fixed;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  background: linear-gradient(to right, #071665, #0348B2, #0870DE);\r\n  display: flex;\r\n  justify-content: space-around;\r\n  padding: 10px 0;\r\n  z-index: 1000;\r\n`;\r\n\r\nconst NavbarIcon = styled.div`\r\n  color: ${props => (props.active ? '#ffffff' : 'rgba(255, 255, 255, 0.6)')};\r\n  font-size: 20px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    color: #ffffff;\r\n    transform: translateY(-3px);\r\n  }\r\n`;\r\n\r\nconst NavbarLabel = styled.div`\r\n  font-size: 12px;\r\n  margin-top: 4px;\r\n`;\r\n\r\nconst Navbar = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const navItems = [\r\n    { path: '/home', icon: FaHome, label: 'Home' },\r\n    { path: '/quest', icon: FaSyncAlt, label: 'Quest' },\r\n    { path: '/leaderboard', icon: FaChartBar, label: 'Leaderboard' },\r\n    { path: '/invite', icon: FaUsers, label: 'Invite' },\r\n    { path: '/profile', icon: FaUser, label: 'Profile' },\r\n    { path: '/settings', icon: FaCog, label: 'Settings' },\r\n  ];\r\n\r\n  return (\r\n    <NavbarContainer>\r\n      {navItems.map(item => (\r\n        <NavbarIcon \r\n          key={item.path}\r\n          active={location.pathname === item.path} \r\n          onClick={() => navigate(item.path)}\r\n        >\r\n          <item.icon />\r\n          <NavbarLabel>{item.label}</NavbarLabel>\r\n        </NavbarIcon>\r\n      ))}\r\n    </NavbarContainer>\r\n  );\r\n};\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { motion } from 'framer-motion';\r\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';\r\nimport { FaUsers } from 'react-icons/fa';\r\nimport Navbar from '../components/Navbar';\r\nimport defaultAvatar from \"../Images/second.png\";\r\nimport backgroundImage from \"../Images/bg5.jpg\";\r\nimport logoLeft from \"../Images/logoo.png\";\r\nimport logoRight from \"../Images/logo1.png\";\r\n\r\nconst ProfileWrapper = styled(motion.div)`\r\n  position: relative;\r\n  min-height: 100vh;\r\n  width: 100vw;\r\n  color: #ffffff;\r\n  background-color: #000033;\r\n  background-image: url(${backgroundImage});\r\n  background-size: cover;\r\n  background-position: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px;\r\n  width: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  box-sizing: border-box;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 1000;\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  height: 40px;\r\n  width: auto;\r\n`;\r\n\r\nconst ContentWrapper = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 80px 20px 70px;\r\n  overflow-y: auto;\r\n`;\r\n\r\nconst UserSection = styled(motion.div)`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px 20px;\r\n  background: rgba(255, 255, 255, 0.1);\r\n  backdrop-filter: blur(5px);\r\n  border-radius: 10px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst UserInfo = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst Avatar = styled(motion.img)`\r\n  width: 60px;\r\n  height: 60px;\r\n  border-radius: 50%;\r\n  margin-right: 15px;\r\n`;\r\n\r\nconst UserDetails = styled(motion.div)`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Username = styled.h2`\r\n  margin: 0;\r\n  font-size: 20px;\r\n`;\r\n\r\nconst UserID = styled.span`\r\n  font-size: 14px;\r\n  opacity: 0.8;\r\n`;\r\n\r\nconst CPLevel = styled.span`\r\n  font-size: 14px;\r\n  opacity: 0.8;\r\n`;\r\n\r\nconst ButtonGroup = styled(motion.div)`\r\n  display: flex;\r\n  gap: 10px;\r\n`;\r\n\r\nconst Button = styled(motion.button)`\r\n  background-color: #3b82f6;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  border-radius: 20px;\r\n  font-size: 14px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n\r\n  &:hover {\r\n    background-color: #2563eb;\r\n  }\r\n`;\r\n\r\nconst StatsGrid = styled(motion.div)`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 15px;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nconst StatCard = styled(motion.div)`\r\n  background: rgba(255, 255, 255, 0.1);\r\n  border-radius: 10px;\r\n  padding: 15px;\r\n  text-align: center;\r\n`;\r\n\r\nconst StatValue = styled.h3`\r\n  margin: 0;\r\n  font-size: 24px;\r\n`;\r\n\r\nconst StatLabel = styled.p`\r\n  margin: 5px 0 0;\r\n  font-size: 12px;\r\n  opacity: 0.8;\r\n`;\r\n\r\nconst ChartContainer = styled(motion.div)`\r\n  height: 200px;\r\n  margin-bottom: 30px;\r\n  background: rgba(255, 255, 255, 0.1);\r\n  border-radius: 10px;\r\n  padding: 15px;\r\n`;\r\n\r\nconst SectionTitle = styled(motion.h3)`\r\n  margin-bottom: 15px;\r\n  font-size: 18px;\r\n  padding-left: 15px;\r\n`;\r\n\r\nconst Profile = () => {\r\n  // Mock data\r\n  const mockUser = {\r\n    username: 'John Doe',\r\n    id: '5856722860',\r\n    cpLevel: '5',\r\n    avatar: defaultAvatar,\r\n    xp: 15000,\r\n    computePower: 250,\r\n    totalTaps: 5000,\r\n    referrals: 10\r\n  };\r\n\r\n  const activityData = [\r\n    { name: 'Mon', xp: 1000 },\r\n    { name: 'Tue', xp: 1500 },\r\n    { name: 'Wed', xp: 1200 },\r\n    { name: 'Thu', xp: 1800 },\r\n    { name: 'Fri', xp: 2000 },\r\n    { name: 'Sat', xp: 1700 },\r\n    { name: 'Sun', xp: 1900 },\r\n  ];\r\n\r\n  const containerVariants = {\r\n    hidden: { opacity: 0 },\r\n    visible: { \r\n      opacity: 1,\r\n      transition: { \r\n        when: \"beforeChildren\",\r\n        staggerChildren: 0.2\r\n      }\r\n    }\r\n  };\r\n\r\n  const itemVariants = {\r\n    hidden: { y: 20, opacity: 0 },\r\n    visible: { \r\n      y: 0, \r\n      opacity: 1,\r\n      transition: { \r\n        type: \"spring\",\r\n        stiffness: 100\r\n      }\r\n    }\r\n  };\r\n\r\n  const wobbleVariants = {\r\n    hover: {\r\n      rotate: [0, -1, 1, -1, 1, 0],\r\n      transition: {\r\n        duration: 0.5,\r\n        repeat: Infinity,\r\n        repeatType: \"reverse\"\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ProfileWrapper\r\n      variants={containerVariants}\r\n      initial=\"hidden\"\r\n      animate=\"visible\"\r\n    >\r\n      <Header>\r\n        <Logo src={logoLeft} alt=\"Left Logo\" />\r\n        <Logo src={logoRight} alt=\"Right Logo\" />\r\n      </Header>\r\n\r\n      <ContentWrapper>\r\n        <UserSection variants={itemVariants}>\r\n          <UserInfo>\r\n            <Avatar \r\n              src={mockUser.avatar} \r\n              alt={mockUser.username} \r\n              whileHover={{ scale: 1.1 }}\r\n              whileTap={{ scale: 0.9 }}\r\n            />\r\n            <UserDetails variants={wobbleVariants} whileHover=\"hover\">\r\n              <Username>{mockUser.username}</Username>\r\n              <UserID>ID: {mockUser.id}</UserID>\r\n              <CPLevel>CP Level: {mockUser.cpLevel}</CPLevel>\r\n            </UserDetails>\r\n          </UserInfo>\r\n          <ButtonGroup>\r\n            <Button whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>Join Channel</Button>\r\n            <Button whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}><FaUsers /> {mockUser.referrals}\r\n            </Button>\r\n          </ButtonGroup>\r\n        </UserSection>\r\n\r\n        <StatsGrid variants={itemVariants}>\r\n          {[\r\n            { value: mockUser.xp.toLocaleString(), label: 'XP' },\r\n            { value: mockUser.computePower, label: 'Compute Power' },\r\n            { value: mockUser.totalTaps.toLocaleString(), label: 'Total Taps' }\r\n          ].map((stat, index) => (\r\n            <StatCard \r\n              key={index} \r\n              whileHover={{ scale: 1.05, rotate: [0, 2, -2, 0] }}\r\n              transition={{ type: \"spring\", stiffness: 300 }}\r\n            >\r\n              <StatValue>{stat.value}</StatValue>\r\n              <StatLabel>{stat.label}</StatLabel>\r\n            </StatCard>\r\n          ))}\r\n        </StatsGrid>\r\n\r\n        <SectionTitle variants={itemVariants}>Activity Graph</SectionTitle>\r\n        <ChartContainer \r\n          variants={itemVariants}\r\n          whileHover={{ scale: 1.02 }}\r\n          transition={{ type: \"spring\", stiffness: 300 }}\r\n        >\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <LineChart data={activityData}>\r\n              <XAxis dataKey=\"name\" stroke=\"#ffffff\" />\r\n              <YAxis stroke=\"#ffffff\" />\r\n              <Tooltip />\r\n              <Line type=\"monotone\" dataKey=\"xp\" stroke=\"#8884d8\" strokeWidth={2} />\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        </ChartContainer>\r\n      </ContentWrapper>\r\n\r\n      <Navbar />\r\n    </ProfileWrapper>\r\n  );\r\n};\r\n\r\nexport default Profile;"],"names":["NavbarContainer","styled","div","NavbarIcon","props","active","NavbarLabel","Navbar","navigate","useNavigate","location","useLocation","navItems","path","icon","FaHome","label","FaSyncAlt","FaChartBar","FaUsers","FaUser","FaCog","_jsx","children","map","item","_jsxs","pathname","onClick","ProfileWrapper","motion","backgroundImage","Header","header","Logo","img","ContentWrapper","UserSection","UserInfo","Avatar","UserDetails","Username","h2","UserID","span","CPLevel","ButtonGroup","Button","button","StatsGrid","StatCard","StatValue","h3","StatLabel","p","ChartContainer","SectionTitle","Profile","mockUser","username","id","cpLevel","avatar","defaultAvatar","xp","computePower","totalTaps","referrals","itemVariants","hidden","y","opacity","visible","transition","type","stiffness","wobbleVariants","hover","rotate","duration","repeat","Infinity","repeatType","variants","when","staggerChildren","initial","animate","src","logoLeft","alt","logoRight","whileHover","scale","whileTap","value","toLocaleString","stat","index","ResponsiveContainer","width","height","LineChart","data","name","XAxis","dataKey","stroke","YAxis","Tooltip","Line","strokeWidth"],"sourceRoot":""}