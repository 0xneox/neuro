{"version":3,"file":"static/js/472.ecfc64bf.chunk.js","mappings":"qLAMA,MAAMA,EAAkBC,EAAAA,GAAOC,GAAG;;;;;;;;;;EAY5BC,EAAaF,EAAAA,GAAOC,GAAG;WAClBE,GAAUA,EAAMC,OAAS,UAAY;;;;;;;;;;;;EAc1CC,EAAcL,EAAAA,GAAOC,GAAG;;;EAkC9B,EA7BeK,KACb,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,EAAW,CACf,CAAEC,KAAM,QAASC,KAAMC,EAAAA,IAAQC,MAAO,QACtC,CAAEH,KAAM,SAAUC,KAAMG,EAAAA,IAAWD,MAAO,SAC1C,CAAEH,KAAM,eAAgBC,KAAMI,EAAAA,IAAYF,MAAO,eACjD,CAAEH,KAAM,UAAWC,KAAMK,EAAAA,IAASH,MAAO,UACzC,CAAEH,KAAM,WAAYC,KAAMM,EAAAA,IAAQJ,MAAO,WACzC,CAAEH,KAAM,YAAaC,KAAMO,EAAAA,IAAOL,MAAO,aAG3C,OACEM,EAAAA,EAAAA,KAACtB,EAAe,CAAAuB,SACbX,EAASY,KAAIC,IACZC,EAAAA,EAAAA,MAACvB,EAAU,CAETE,OAAQK,EAASiB,WAAaF,EAAKZ,KACnCe,QAASA,IAAMpB,EAASiB,EAAKZ,MAAMU,SAAA,EAEnCD,EAAAA,EAAAA,KAACG,EAAKX,KAAI,KACVQ,EAAAA,EAAAA,KAAChB,EAAW,CAAAiB,SAAEE,EAAKT,UALdS,EAAKZ,SAQE,C,0DC5DtB,MAyBA,EAzBgBgB,IACd,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,OAC1BC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,MAmBnC,MAAO,CAAEK,SAjBOC,EAAAA,EAAAA,cAAYC,iBAC1B,IACEL,GAAW,GACXE,EAAS,MACT,MAAMI,QAAeX,KAAQY,WAE7B,OADAV,EAAQS,GACDA,CACT,CAAE,MAAOE,GAIP,MAHAN,EAASM,GACTC,EAAAA,GAAMR,MAAM,8CACZS,QAAQT,MAAM,aAAcO,GACtBA,CACR,CAAC,QACCR,GAAW,EACb,CACF,GAAG,CAACL,IAEcC,OAAMG,UAASE,QAAO,C,wHCf1C,MAAMU,EAAUC,EAAAA,EAAS;;;EAKnBC,EAAOD,EAAAA,EAAS;;;;EAMhBE,EAAqB/C,EAAAA,GAAOC,GAAG;;;;;eAKtB2C;;;EAKTI,EAAShD,EAAAA,GAAOC,GAAG;;;;;EAOnBgD,EAAiBjD,EAAAA,GAAOkD,MAAM;;;;;;;EAS9BC,EAAWnD,EAAAA,GAAOC,GAAG;;;;;EAuDrBmD,GAhDYpD,EAAAA,GAAOC,GAAG;;;;;;;;;;eAUb6C;;;;;;;EASM9C,EAAAA,GAAOC,GAAG;;;;;EAOVD,EAAAA,GAAOC,GAAG;;;;;;EAQnBD,EAAAA,GAAOkD,MAAM;;;;sBAIH/C,GAASA,EAAMC,OAAS,UAAY;;;;;;;;EAUlCJ,EAAAA,GAAOC,GAAG;;;;;;;;;;;;;;;;GAkB5BoD,EAAkBrD,EAAAA,GAAOC,GAAG;;;;;;;;;;;;;EAe5BqD,EAAgBtD,EAAAA,GAAOC,GAAG;;;;EAM1BsD,EAAsBvD,EAAAA,GAAOC,GAAG;;;;EAMhCuD,EAAgBxD,EAAAA,GAAOkD,MAAM;;;;;;;;;;;;;;;IAe/B/C,GAASA,EAAMsD,UAAYC,EAAAA,EAAG;;;;;;;EAkElC,EAzDoBC,KAClB,MAAOC,EAAcC,IAAmB9B,EAAAA,EAAAA,UAAS,KACzCK,QAAS0B,EAAiB,QAAE9B,EAAO,MAAEE,IAAU6B,EAAAA,EAAAA,GAAOC,EAAAA,KACtD5B,QAAS6B,IAAiBF,EAAAA,EAAAA,GAAOG,EAAAA,KAEzCC,EAAAA,EAAAA,YAAU,KACRL,IAAoBM,KAAKP,EAAgB,GACxC,CAACC,IAYJ,OAAI9B,GAAgBX,EAAAA,EAAAA,KAAC0B,EAAkB,CAAAzB,SAAC,4BACpCY,GAAcT,EAAAA,EAAAA,MAACsB,EAAkB,CAAAzB,SAAA,CAAC,+BAA6BY,EAAMmC,YAGvE5C,EAAAA,EAAAA,MAAA6C,EAAAA,SAAA,CAAAhD,SAAA,EACEG,EAAAA,EAAAA,MAACsB,EAAkB,CACjBwB,QAAS,CAAEC,QAAS,GACpBC,QAAS,CAAED,QAAS,GACpBE,KAAM,CAAEF,QAAS,GAAIlD,SAAA,EAErBG,EAAAA,EAAAA,MAACuB,EAAM,CAAA1B,SAAA,EACLG,EAAAA,EAAAA,MAACwB,EAAc,CAAA3B,SAAA,CAAC,kBACAD,EAAAA,EAAAA,KAACsD,EAAAA,IAAa,QAE9BtD,EAAAA,EAAAA,KAAC8B,EAAQ,CAAA7B,SAAC,sBAIZD,EAAAA,EAAAA,KAAC+B,EAAe,CAAA9B,SACbsC,EAAarC,KAAIqD,IAChBnD,EAAAA,EAAAA,MAAC4B,EAAe,CAAA/B,SAAA,EACdG,EAAAA,EAAAA,MAAC6B,EAAa,CAAAhC,SAAA,CAAEsD,EAAYC,SAAS,SACrCpD,EAAAA,EAAAA,MAAC8B,EAAmB,CAAAjC,SAAA,CAAEsD,EAAYE,SAAS,IAAEF,EAAYG,aACzD1D,EAAAA,EAAAA,KAACmC,EAAa,CACZ7B,QAASA,IAlCHW,WAClB,UACQ2B,EAAae,GACnB,MAAMC,QAA4BnB,IAClCD,EAAgBoB,EAClB,CAAE,MAAO/C,GACPS,QAAQT,MAAM,+BAAgCA,EAChD,GA2B2BgD,CAAYN,EAAYO,IACvC1B,SAAUmB,EAAYQ,SAAWR,EAAYE,SAAWF,EAAYG,SAASzD,SAC9E,cANmBsD,EAAYO,YAaxC9D,EAAAA,EAAAA,KAACf,EAAAA,EAAM,MACN,C","sources":["components/Navbar.js","hooks/useApi.js","pages/Achievement.js"],"sourcesContent":["// components/Navbar.js\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { FaHome, FaSyncAlt, FaChartBar, FaUser, FaUsers, FaCog } from 'react-icons/fa';\r\n\r\nconst NavbarContainer = styled.div`\r\n  position: fixed;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  background: linear-gradient(to right, #071665, #0348B2, #0870DE);\r\n  display: flex;\r\n  justify-content: space-around;\r\n  padding: 10px 0;\r\n  z-index: 1000;\r\n`;\r\n\r\nconst NavbarIcon = styled.div`\r\n  color: ${props => (props.active ? '#ffffff' : 'rgba(255, 255, 255, 0.6)')};\r\n  font-size: 20px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    color: #ffffff;\r\n    transform: translateY(-3px);\r\n  }\r\n`;\r\n\r\nconst NavbarLabel = styled.div`\r\n  font-size: 12px;\r\n  margin-top: 4px;\r\n`;\r\n\r\nconst Navbar = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const navItems = [\r\n    { path: '/home', icon: FaHome, label: 'Home' },\r\n    { path: '/quest', icon: FaSyncAlt, label: 'Quest' },\r\n    { path: '/leaderboard', icon: FaChartBar, label: 'Leaderboard' },\r\n    { path: '/invite', icon: FaUsers, label: 'Invite' },\r\n    { path: '/profile', icon: FaUser, label: 'Profile' },\r\n    { path: '/settings', icon: FaCog, label: 'Settings' },\r\n  ];\r\n\r\n  return (\r\n    <NavbarContainer>\r\n      {navItems.map(item => (\r\n        <NavbarIcon \r\n          key={item.path}\r\n          active={location.pathname === item.path} \r\n          onClick={() => navigate(item.path)}\r\n        >\r\n          <item.icon />\r\n          <NavbarLabel>{item.label}</NavbarLabel>\r\n        </NavbarIcon>\r\n      ))}\r\n    </NavbarContainer>\r\n  );\r\n};\r\n\r\nexport default Navbar;","import { useState, useCallback } from 'react';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst useApi = (apiFunc) => {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const execute = useCallback(async (...args) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const result = await apiFunc(...args);\r\n      setData(result);\r\n      return result;\r\n    } catch (err) {\r\n      setError(err);\r\n      toast.error('An error occurred. Please try again later.');\r\n      console.error('API Error:', err);\r\n      throw err; // Re-throw the error for the component to handle if needed\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [apiFunc]);\r\n\r\n  return { execute, data, loading, error };\r\n};\r\n\r\nexport default useApi;","import React, { useState, useEffect } from 'react';\r\n\r\nimport { motion } from 'framer-motion';\r\nimport { getAchievements, claimAchievement } from '../services/api';\r\nimport useApi from '../hooks/useApi';\r\nimport { FaChevronDown, FaGem, FaTrophy } from 'react-icons/fa';\r\nimport Navbar from '../components/Navbar';\r\nimport styled, { keyframes, css } from 'styled-components';\r\n\r\n\r\nconst slideIn = keyframes`\r\n  from { transform: translateX(100%); }\r\n  to { transform: translateX(0); }\r\n`;\r\n\r\nconst glow = keyframes`\r\n  0% { box-shadow: 0 0 5px #ffd700; }\r\n  50% { box-shadow: 0 0 20px #ffd700, 0 0 30px #ffd700; }\r\n  100% { box-shadow: 0 0 5px #ffd700; }\r\n`;\r\n\r\nconst AchievementWrapper = styled.div`\r\n  padding: 20px;\r\n  color: #ffffff;\r\n  background-color: #000033;\r\n  min-height: 100vh;\r\n  animation: ${slideIn} 0.3s ease-out;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst DropdownButton = styled.button`\r\n  background: none;\r\n  border: none;\r\n  color: white;\r\n  font-size: 18px;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst XPEarned = styled.div`\r\n  background-color: #3d85c6;\r\n  padding: 5px 15px;\r\n  border-radius: 20px;\r\n  font-size: 14px;\r\n`;\r\n\r\nconst CoinImage = styled.div`\r\n  width: 150px;\r\n  height: 150px;\r\n  background-color: gold;\r\n  border-radius: 50%;\r\n  margin: 20px auto;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 48px;\r\n  animation: ${glow} 2s ease-in-out infinite;\r\n  cursor: pointer;\r\n  transition: transform 0.3s ease;\r\n\r\n  &:hover {\r\n    transform: scale(1.1);\r\n  }\r\n`;\r\n\r\nconst TimerWrapper = styled.div`\r\n  text-align: center;\r\n  font-size: 36px;\r\n  font-weight: bold;\r\n  margin: 20px 0;\r\n`;\r\n\r\nconst TabContainer = styled.div`\r\n  display: flex;\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n  border-radius: 25px;\r\n  padding: 5px;\r\n  margin: 20px 0;\r\n`;\r\n\r\nconst Tab = styled.button`\r\n  flex: 1;\r\n  padding: 10px;\r\n  border: none;\r\n  background-color: ${props => props.active ? '#3d85c6' : 'transparent'};\r\n  color: white;\r\n  border-radius: 20px;\r\n  font-size: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: background-color 0.3s ease;\r\n`;\r\n\r\nconst AchievementGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  gap: 15px;\r\n  overflow-y: auto;\r\n  padding-right: 10px;\r\n  flex-grow: 1;\r\n\r\n  &::-webkit-scrollbar {\r\n    width: 5px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: #3d85c6;\r\n    border-radius: 10px;\r\n  }\r\n`;\r\n\r\nconst AchievementItem = styled.div`\r\n  background-color: rgba(61, 133, 198, 0.1);\r\n  border-radius: 15px;\r\n  padding: 15px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n\r\n  &:hover {\r\n    transform: translateY(-5px);\r\n    box-shadow: 0 5px 15px rgba(61, 133, 198, 0.3);\r\n  }\r\n`;\r\n\r\nconst AchievementXP = styled.div`\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst AchievementProgress = styled.div`\r\n  font-size: 14px;\r\n  color: #888;\r\n  margin-bottom: 15px;\r\n`;\r\n\r\nconst CollectButton = styled.button`\r\n  background-color: #00c853;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 20px;\r\n  border-radius: 20px;\r\n  font-size: 14px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease, transform 0.3s ease;\r\n\r\n  &:hover {\r\n    background-color: #00e676;\r\n    transform: scale(1.05);\r\n  }\r\n\r\n  ${props => props.disabled && css`\r\n    background-color: #888;\r\n    cursor: not-allowed;\r\n    &:hover {\r\n      transform: none;\r\n    }\r\n  `}\r\n`;\r\n\r\nconst Achievement = () => {\r\n  const [achievements, setAchievements] = useState([]);\r\n  const { execute: fetchAchievements, loading, error } = useApi(getAchievements);\r\n  const { execute: executeClaim } = useApi(claimAchievement);\r\n\r\n  useEffect(() => {\r\n    fetchAchievements().then(setAchievements);\r\n  }, [fetchAchievements]);\r\n\r\n  const handleClaim = async (achievementId) => {\r\n    try {\r\n      await executeClaim(achievementId);\r\n      const updatedAchievements = await fetchAchievements();\r\n      setAchievements(updatedAchievements);\r\n    } catch (error) {\r\n      console.error('Failed to claim achievement:', error);\r\n    }\r\n  };\r\n\r\n  if (loading) return <AchievementWrapper>Loading achievements...</AchievementWrapper>;\r\n  if (error) return <AchievementWrapper>Error loading achievements: {error.message}</AchievementWrapper>;\r\n\r\n  return (\r\n    <>\r\n      <AchievementWrapper\r\n        initial={{ opacity: 0 }}\r\n        animate={{ opacity: 1 }}\r\n        exit={{ opacity: 0 }}\r\n      >\r\n        <Header>\r\n          <DropdownButton>\r\n            7 Daily Quest <FaChevronDown />\r\n          </DropdownButton>\r\n          <XPEarned>350 XP earned</XPEarned>\r\n        </Header>\r\n\r\n       \r\n        <AchievementGrid>\r\n          {achievements.map(achievement => (\r\n            <AchievementItem key={achievement.id}>\r\n              <AchievementXP>{achievement.xpReward}XP</AchievementXP>\r\n              <AchievementProgress>{achievement.progress}/{achievement.required}</AchievementProgress>\r\n              <CollectButton \r\n                onClick={() => handleClaim(achievement.id)}\r\n                disabled={achievement.claimed || achievement.progress < achievement.required}\r\n              >\r\n                Collect\r\n              </CollectButton>\r\n            </AchievementItem>\r\n          ))}\r\n        </AchievementGrid>\r\n      </AchievementWrapper>\r\n      <Navbar />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Achievement;"],"names":["NavbarContainer","styled","div","NavbarIcon","props","active","NavbarLabel","Navbar","navigate","useNavigate","location","useLocation","navItems","path","icon","FaHome","label","FaSyncAlt","FaChartBar","FaUsers","FaUser","FaCog","_jsx","children","map","item","_jsxs","pathname","onClick","apiFunc","data","setData","useState","loading","setLoading","error","setError","execute","useCallback","async","result","arguments","err","toast","console","slideIn","keyframes","glow","AchievementWrapper","Header","DropdownButton","button","XPEarned","AchievementGrid","AchievementItem","AchievementXP","AchievementProgress","CollectButton","disabled","css","Achievement","achievements","setAchievements","fetchAchievements","useApi","getAchievements","executeClaim","claimAchievement","useEffect","then","message","_Fragment","initial","opacity","animate","exit","FaChevronDown","achievement","xpReward","progress","required","achievementId","updatedAchievements","handleClaim","id","claimed"],"sourceRoot":""}